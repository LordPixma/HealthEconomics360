name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: healtheconomics360_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest-cov flake8 black

    - name: Set up environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "FLASK_CONFIG=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/healtheconomics360_test" >> $GITHUB_ENV

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with Black
      run: |
        black --check app/

    - name: Run tests with pytest
      run: |
        cd app
        pytest --cov=. --cov-report=xml --cov-report=html
      env:
        FLASK_ENV: testing
        FLASK_CONFIG: testing
        SECRET_KEY: test-secret-key
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/healtheconomics360_test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./app/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities in dependencies
      run: |
        pip install -r app/requirements.txt
        safety check

    - name: Run security linting with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
    
    - name: Test application startup
      run: |
        cd app
        timeout 10s python run.py || code=$?; if [[ $code -eq 124 ]]; then echo "App started successfully"; else exit $code; fi
      env:
        FLASK_ENV: production
        SECRET_KEY: test-secret-key-for-build
        DATABASE_URL: sqlite:///test.db

    - name: Build summary
      run: |
        echo "âœ… All tests passed"
        echo "âœ… Security checks completed"
        echo "âœ… Application builds successfully"
        echo "ðŸš€ Ready for deployment"